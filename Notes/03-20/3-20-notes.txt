[03/20/2025]

Using a mutex (or using multiple mutexes)

  GLOBAL DATA:
    x, y

  THREAD FUNCTION CODE:
  {
    int z;   /* local variable only within the scope of this given thread */
    read x;
    update y;
    update z;
  }

Updates:
-- Any time we update a shared/global variable, use a mutex (binary semaphore)
-- The use of the mutex should be as minimal as possible,
    meaning that we want to obtain the lock/mutex,
     execute the critical section code,
      release the lock/mutex
   (in as small a block of code as possible...)

Reads:
-- Any time we read a shared/global variable, we *might* need a mutex...
-- If the read is followed by a change/update to that same variable or
    we use the data read to perform an update, then a mutex is needed
-- If we're interested in just a snapshot of the state of the
    shared/global variable, then we most likely do not need a mutex

                    SHARED/GLOBAL:
                    x, mutex
    THREAD 1:                     THREAD 2:
    obtain mutex                  obtain mutex
    {                             {
      read x                        update x.field1
    }                               update x.field2
    release mutex                   update x.field3
                                  }
                                  release mutex

===============================================================================

PRODUCER/CONSUMER PROBLEM (a.k.a. SHARED BUFFER PROBLEM)
-- Given a shared buffer (array) of a fixed size N
-- One or more producer threads
-- One or more consumer threads


                       /* shared/global memory */
                       int N = 20;
                       buffer[N];

  /* producer */                       /* consumer */
  while ( 1 )                          while ( 1 )
  {                                    {
    item = produce_next_item();
                                         item = remove_from_buffer();
    add_to_buffer( item );
                                         consume( item );
  }                                    }



The solution below uses two counting semaphores to ensure:
(1) no buffer overflow will occur in a producer
(2) no reading from an empty buffer in a consumer

                       /* shared/global memory */
                       int N = 20;
                       buffer[N];
                       semaphore empty_slots = N;  /* 0..N */
                       semaphore used_slots = 0;   /* 0..N */

  /* producer */                       /* consumer */
  while ( 1 )                          while ( 1 )
  {                                    {
    item = produce_next_item();          P( used_slots );
    P( empty_slots );                      item = remove_from_buffer();
      add_to_buffer( item );             V( empty_slots );
    V( used_slots );                     consume( item );
  }                                    }

    (reminder that P() essentially does S-- and V() does S++)




The solution below uses two counting semaphores and a binary semaphore to ensure:
(1) no buffer overflow will occur in a producer
(2) no reading from an empty buffer in a consumer
(3) only one thread can access the buffer at any given time...

                       /* shared/global memory */
                       int N = 20;
                       buffer[N];
                       semaphore empty_slots = N;  /* 0..N (counting semaphore) */
                       semaphore used_slots = 0;   /* 0..N (counting semaphore) */
                       semaphore mutex = 1;        /* 0 or 1 (binary semaphore) */

  /* producer */                       /* consumer */
  while ( 1 )                          while ( 1 )
  {                                    {
    item = produce_next_item();          P( used_slots );
    P( empty_slots );                      P( mutex );
      P( mutex );                            item = remove_from_buffer();
        add_to_buffer( item );             V( mutex );
      V( mutex );                        V( empty_slots );
    V( used_slots );                     consume( item );
  }                                    }

    (reminder that P() essentially does S-- and V() does S++)

  This above solution is not very parallel....
  -- The use of the mutex should be as minimal as possible

  How do we parallelize the above solution further such that reads/writes
   can occur simultaneously in different slots of the array?
                               ^^^^^^^^^^^^^^^


                       /* shared/global memory */
                       int N = 20;
                       buffer[N];
                       semaphore empty_slots = N;  /* 0..N (counting semaphore) */
                       semaphore used_slots = 0;   /* 0..N (counting semaphore) */
                       semaphore mutex = 1;        /* 0 or 1 (binary semaphore) */
                       int next_producer_index = 0;
                       int next_consumer_index = 0;
                       semaphore mutex_on_next_producer_index = 1;
                       semaphore mutex_on_next_consumer_index = 1;

  TO DO: incorporate the four new variables above to "better" synchronize
          the solution below...

  /* producer */                       /* consumer */
  while ( 1 )                          while ( 1 )
  {                                    {
    item = produce_next_item();          P( used_slots );
    P( empty_slots );                      P( mutex );
      P( mutex );                            item = remove_from_buffer();
        add_to_buffer( item );             V( mutex );
      V( mutex );                        V( empty_slots );
    V( used_slots );                     consume( item );
  }                                    }

    (reminder that P() essentially does S-- and V() does S++)


  TO DO: Implement the above Producer/Consumer problem using multiple threads
          and global process memory...

  TO DO: Implement the above Producer/Consumer problem using multiple processes
          and shared memory...

